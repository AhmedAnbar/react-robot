{"version":3,"sources":["components/header/Header.jsx","components/card-robot/CardRebot.jsx","components/card-list/CardList.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","CardRobot","src","robot","email","alt","name","CardList","state","robots","fetchItems","endpoint","fetch","then","result","json","setState","this","map","key","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAaeA,G,8BAVA,SAACC,GACd,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,UAAd,mB,mCCSOC,G,MAbG,SAACF,GACjB,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,aACb,yBAAKE,IAAG,+BAA0BH,EAAMI,MAAMC,MAAtC,aAAwDJ,UAAU,eAAeK,IAAI,QAC7F,yBAAKL,UAAU,yBACb,wBAAIA,UAAU,cAAcD,EAAMI,MAAMG,WCqBnCC,E,2MAzBbC,MAAQ,CACNC,OAAQ,I,EAOVC,WAAa,SAACC,GACZC,MAAMD,GACLE,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAC,GAAM,OAAI,EAAKE,SAAS,CAACP,OAAQK,O,mFANvCG,KAAKP,WAAW,gD,+BAUhB,OACE,yBAAKV,UAAU,OACZiB,KAAKT,MAAMC,OAAOS,IAAI,SAAAf,GACrB,OAAO,kBAAC,EAAD,CAAWgB,IAAKhB,EAAMiB,GAAIjB,MAAOA,W,GAnB3BkB,aCeRC,MATf,WACE,OACE,yBAAKtB,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,gB","file":"static/js/main.30ffa61f.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n  return (\n    <div className='row text-center'> \n      <div className='col'>\n        <h2 className='header'>React-Robot</h2>\n      </div>\n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport './CardRobot.css';\n\nconst CardRobot = (props) => {\n  return (\n    <div className='col-xs-6 col-md-3'>\n      <div className=\"card mb-4\">\n        <img src={`https://robohash.org/${props.robot.email}?set=set3`} className=\"card-img-top\" alt=\"...\" />\n        <div className=\"card-body text-center\">\n          <h5 className=\"card-title\">{props.robot.name}</h5>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CardRobot;","import React, { Component } from 'react';\n\nimport CardRobot from '../card-robot/CardRebot';\n\nclass CardList extends Component {\n  state = {\n    robots: []\n  }\n\n  componentDidMount() {\n    this.fetchItems('https://jsonplaceholder.typicode.com/users')\n  }\n\n  fetchItems = (endpoint) => {\n    fetch(endpoint)\n    .then(result => result.json())\n    .then(result => this.setState({robots: result}))\n    \n  }\n  render() {\n    return (\n      <div className='row'>\n        {this.state.robots.map(robot => {\n          return <CardRobot key={robot.id} robot={robot} />\n        })}\n      </div>\n    )\n  }\n}\n\nexport default CardList;","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport Header from './components/header/Header';\nimport CardList from './components/card-list/CardList';\n\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Header />\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}